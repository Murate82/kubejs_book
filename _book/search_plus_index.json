{"./":{"url":"./","title":"前言","keywords":"","body":"KubeJS 6 使用教程 此文章是为了给魔改玩家更好的使用KubeJS KubeJS可以让你用JavaScript语言创建脚本来管理你的服务器，添加新的块和项目，改变配方，添加自定义处理程序的任务mod和更多。 powered by Gitbook文章修改时间： 2024-03-01 17:25:01 "},"KubeJS/Kubejs的使用.html":{"url":"KubeJS/Kubejs的使用.html","title":"一、KubeJS的使用","keywords":"","body":"一、KubeJS的使用 在安装与其对应版本的KubeJS 启动游戏后，可在.minecraft文件夹下找到kubejs文件夹 kubejs ├─assets │ └─kubejs │ └─textures │ ├─block │ └─item ├─client_scripts ├─config ├─data ├─exported │ └─tags ├─server_scripts └─startup_scripts assets 文件夹和资源包的功能相同，你可以在这里的对应目录下放自定义方块、物品的纹理、模型等，也可以当做一个全局资源包加载器 config 文件夹中包括对KubeJS的一些配置选项 data 文件夹和数据包功能基本相同，类似于全局数据包加载器 exported 文件夹包含游戏内通过指令导出的部分数据，如数据包等 client_scripts 文件夹为客户端资源被加载时加载脚本（可使用 F3 + T 游戏重载） server_scripts 中为服务端资源被加载时加载的脚本（可使用游戏命令 /reload 游戏重载） startup_scripts 中为启动时就被加载的脚本（可使用游戏内命令 /kubejs reload startup_scripts 游戏重载） powered by Gitbook文章修改时间： 2024-03-01 18:24:22 "},"KubeJS/KubeJS的拓展.html":{"url":"KubeJS/KubeJS的拓展.html","title":"二、KubeJS的拓展","keywords":"","body":"二、KubeJS的拓展 KubeJS作为一个魔改模组拥有着很多的拓展模组，可以更好更快捷的帮助开发者们创建属于自己的东西 powered by Gitbook文章修改时间： 2024-03-01 18:28:12 "},"格雷/格雷.html":{"url":"格雷/格雷.html","title":"1、[GTM]格雷科技现代版GregTechCEu Modern","keywords":"","body":"1、[GTM]格雷科技现代版GregTechCEu Modern 格雷科技现代版（GregTechCEu Modern），是一款基于 [GTCEu] 格雷科技社区版：非官方版 的模组，本模组基于 Architectury 架构开发，使其支持 Forge 以及 Fabric 双平台，旨在为 Minecraft 1.19+ 的版本带来更好的格雷科技体验。 与 GTCEu 间的差异 更切合 1.19+ 版本的内容，例如不同材料的粗矿形态、以及允许以数据包的方式来添加自定义配方和矿脉生成； 性能更加稳定，使游戏后期的体验更加流畅； 新的物品/方块纹理（使用 ZedTech 材质替代原有材质，并且契合了高版本 Jappa 纹理质感）、UI，以及内置的连接纹理； 无需安装任何前置模组即可运行； 兼容 REI、JEI、TOP，以及 KubeJS 的自定义内容…… powered by Gitbook文章修改时间： 2024-03-01 19:49:45 "},"格雷/格雷_材料创建.html":{"url":"格雷/格雷_材料创建.html","title":"1.1、材料创建","keywords":"","body":"1.1 材料创建 创建金属锭 GTCEuStartupEvents.registry('gtceu:material', event => { event.create('andesite_alloy') .ingot() .components('1x andesite', '1x iron') .color(0x839689).iconSet(GTMaterialIconSet.DULL) .flags(GTMaterialFlags.GENERATE_PLATE, GTMaterialFlags.GENERATE_GEAR, GTMaterialFlags.GENERATE_SMALL_GEAR) }) 创建宝石 GTCEuStartupEvents.registry('gtceu:material', event => { event.create('purple_coal') .gem(2, 4000) //(等级属性，燃烧tick) .element(GTElements.C) .ore() //是否生成矿物 .color(0x7D2DDB).iconSet(GTMaterialIconSet.LIGNITE) }) 创建导线 GTCEuStartupEvents.registry('gtceu:material', event => { event.create('mysterious_dust') .dust() .cableProperties(GTValues.V[GTValues.LV], 69, 0, true) // }) 创建流体 GTCEuStartupEvents.registry('gtceu:material', event => { event.create('mysterious_ooze') .fluid() .color(0x500bbf) .fluidTemp(69420) }) 流体如果创建报错删除.fluidTemp(xxx) powered by Gitbook文章修改时间： 2024-03-01 23:30:46 "},"格雷/格雷_自定义机器.html":{"url":"格雷/格雷_自定义机器.html","title":"1.x、自定义多方快机器","keywords":"","body":"1.x 自定义机器 自定义机器 SingleBlock_Registry.js // 注册机器配方类型 GTCEuStartupEvents.registry('gtceu:recipe_type', event => {//注册一个新的多方块 event.create('small_greenhouses')//设置机器的名字 .category('smallgreenhouses')//设置类型 .setEUIO('in') //设置机器的能源输入/输出 .setMaxIOSize(1, 1, 1, 0)//设置机器输入输出个数(物品输入,物品输出,流体输入,流体输出) .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)//设置机器的背面带有覆盖版 .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)//设置机器运行时处理中的样子 .setSound(GTSoundEntries.BATH)//设置机器运行时工作的声音 }) // 注册机器方块 GTCEuStartupEvents.registry('gtceu:machine', event => { event.create('small_greenhouses', 'simple', GTValues.IV)//名字和配方类型相同、单方块、机器电压 .recipeType('small_greenhouses', true, true)//显示的配方类型名字 .workableTieredHullRenderer('gtceu:block/machines/smallgreenhouses')//设置机器材质 }) recipes.js const [ULV, LV, MV, HV, EV, IV, LuV, ZPM, UV, UHV, UEV, UIV, UXV, OpV, MAX] = GTValues.VA event.recipes.gtceu.small_greenhouses(\"rubber_sapling\")//配方ID .itemInputs('gtceu:rubber_sapling')//物品输入 .inputFluids(Fluid.of('minecraft:water', 1000))//流体输入 .itemOutputs(\"32x gtceu:rubber_log\")//物品输出 .duration(90)//持续时间 .EUt(IV)//电压 en_us.json { \"gtceu.small_greenhouses\": \"Small Greenhouses\", \"block.gtceu.iv_small_greenhouses\": \"Small Greenhouses\" } zh_cn.json { \"gtceu.small_greenhouses\": \"小型温室\", \"block.gtceu.iv_small_greenhouses\": \"小型温室\" } 在给单方块机器添加材质时材质要放在\\kubejs\\assets\\gtceu\\textures\\block\\machines里 overlay_front_active.png.mcmeta //默认运行方向从下到上 { \"animation\": { \"frametime\": 3 } //多种状态可以指定运行的方向 } \"animation\": { \"frametime\": 16, \"frames\": [ 0, 1, 2 ] } 材质可以打开此模组.jar文件assets\\gtceu\\textures\\block\\machines查看（或者自行绘画） 自定义多方块机器 Multiblock_Registry.js // 注册机器配方类型 GTCEuStartupEvents.registry('gtceu:recipe_type', event => {//注册一个新的多方块 event.create('greenhouse')//设置机器的名字 .category('greenhouse')//设置类型 .setEUIO('in') //设置机器的能源输入/输出 .setMaxIOSize(4, 4, 1, 0)//设置机器输入输出个数(物品输入,物品输出,流体输入,流体输出) .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)//设置机器运行时处理中的样子 .setSound(GTSoundEntries.BATH)//设置机器运行时工作的声音 .setMaxTooltips(5)//设置最大信息提示 }) // 注册机器方块 GTCEuStartupEvents.registry('gtceu:machine', event => { event.create('greenhouse', 'multiblock')//名字和配方类型相同、多方快 .rotationState(RotationState.NON_Y_AXIS)//设置多方快为不围绕Y轴旋转 .recipeType('greenhouse')//现在的配方类型名字 .appearanceBlock(GCyMBlocks.CASING_ATOMIC)//设置成型后外壁的材质 .pattern(definition => FactoryBlockPattern.start()//多方块的摆放 .aisle('CCC', 'CGC', 'CGC', 'CLC', 'CCC') .aisle('CMC', 'GSG', 'G#G', 'LIL', 'COC') .aisle('CKC', 'CGC', 'CGC', 'CLC', 'CNC') .where('K', Predicates.controller(Predicates.blocks(definition.get())))//给每个字符指定所需方块（此行为机器控制器） .where('M', Predicates.blocks('moss_block') .or(Predicates.blocks('dirt')) .or(Predicates.blocks('grass_block')) )//可以定义多种方块 .where('G', Predicates.blocks('ae2:quartz_glass')) .where('S', Predicates.blocks('oak_sapling') .or(Predicates.blocks('dark_oak_sapling')) .or(Predicates.blocks('spruce_sapling')) .or(Predicates.blocks('birch_sapling')) .or(Predicates.blocks('jungle_sapling')) .or(Predicates.blocks('acacia_sapling')) .or(Predicates.blocks('azalea')) .or(Predicates.blocks('flowering_azalea')) .or(Predicates.blocks('mangrove_propagule')) .or(Predicates.blocks('gtceu:rubber_sapling')) ) .where('I', Predicates.blocks('glowstone')) .where('L', Predicates.blocks(GTBlocks.CASING_GRATE.get()))//装配线格栅 .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())//外壳 .or(Predicates.autoAbilities(definition.getRecipeTypes()))//或者输入输出接口 ) .where('O', Predicates.abilities(PartAbility.MUFFLER)//消声器 .setExactLimit(1)//限制数量 ) .where('N', Predicates.abilities(PartAbility.MAINTENANCE))//维护仓 .where('#', Predicates.air())//空气 .build() ).workableCasingRenderer('gtceu:block/casings/gcym/atomic_casing' ,'gtceu:block/multiblock/implosion_compressor' , false)//控制器材质，控制器正面样式 }) recipes.js function Greenhouse(id, input, eu, fluid, output) { event.recipes.gtceu.greenhouse(id)//配方id .circuit(1)//设置编程电路 .itemInputs(input)//物品输入 .inputFluids(Fluid.of('minecraft:water', fluid))//流体输入 .itemOutputs(output)//物品输出 .duration(90)//持续时间 .EUt(eu)//电压 .dimension(\"minecraft:overworld\")//指定维度处理 .biome('minecraft:planis')//指定群系处理 .chancedOutput('gtceu:rubber_sapling',50,1)//概率输出物品 .chancedFluidOutput('gtceu:rubber',5,2)//概率输出流体 .cleanroom(CleanroomType.CLEANROOM)//是否需要纯净仓 } //橡胶树 Greenhouse('rubber_sapling' , 'gtceu:rubber_sapling' , MV , 1000 , ['32x gtceu:rubber_log' , '8x gtceu:sticky_resin' , '4x gtceu:rubber_sapling']) gtceu:recipe_type 方法 属性 .setEUIO(string) in（消耗电的机器）、out（发电的机器） .setMaxIOSize(number,number,number,number) 物品输入，物品输出，流体输入，流体输出 .setProgressBar(GuiTextures.xxx ,FillDirection.xxx) (处理中的图标,处理中图标的方向) .setSound(GTSoundEntries.xxx) 机器运行时的声音 .setMaxTooltips(number) 配方中显示信息最大行数 GuiTextures 图片 值 不写setProgressBar默认的图标 PROGRESS_BAR_ARROW PROGRESS_BAR_CRYSTALLIZATION PROGRESS_BAR_ARROW_MULTIPLE PROGRESS_BAR_ARC_FURNACE PROGRESS_BAR_ASSEMBLY_LINE_ARROW PROGRESS_BAR_BATH PROGRESS_BAR_BENDING PROGRESS_BAR_CANNER PROGRESS_BAR_CIRCUIT PROGRESS_BAR_CIRCUIT_ASSEMBLER PROGRESS_BAR_COKE_OVEN PROGRESS_BAR_COMPRESS PROGRESS_BAR_CRACKING PROGRESS_BAR_EXTRACT PROGRESS_BAR_EXTRUDER PROGRESS_BAR_FUSION PROGRESS_BAR_GAS_COLLECTOR PROGRESS_BAR_HAMMER PROGRESS_BAR_LATHE PROGRESS_BAR_MACERATE PROGRESS_BAR_MAGNET PROGRESS_BAR_MASS_FAB PROGRESS_BAR_MIXER PROGRESS_BAR_PACKER PROGRESS_BAR_RECYCLER PROGRESS_BAR_SIFT PROGRESS_BAR_SLICE PROGRESS_BAR_UNPACKER PROGRESS_BAR_WIREMILL FillDirection 图片 值 LEFT_TO_RIGHT RIGHT_TO_LEFT DOWN_TO_UP UP_TO_DOWN 燃烧的处理效果不能使用UP_TO_DOWN会报错 gtceu:machine 方法 属性 .create(string, string, ang[]) 机器名称，类型（simple单方块、multiblock多方快），[电压（可以写一个或者多个，按照电压生成机器的个数只在simple类型生效）] .appearanceBlock(GTBlocks.xxx) 外壳材质 .Predicates.blocks(blocks) 指定方块 .workableCasingRenderer(string,string,boolean) 控制器材质，控制器正面材质 在.appearanceBlock()和.Predicates.blocks()中可选择（GTBlocks类或GCyMBlocks类中外壳材质） 在.workableCasingRenderer中设置控制器外壳的材质可以自定义材质也可以使用GTM自带的材质，在使用自定义的材质时要使用kubejs定义方块材质的位置 GTBlocks & GCyMBlocks & workableCasingRenderer控制器材质 图片 GTBlocks GCyMBlocks workableCasingRenderer GTBlocks.CASING_PRIMITIVE_BRICKS / gtceu:block/casings/solid/machine_primitive_bricks GTBlocks.CASING_COKE_BRICKS / gtceu:block/casings/solid/machine_coke_bricks GTBlocks.CASING_BRONZE_BRICKS / gtceu:block/casings/solid/machine_casing_bronze_plated_bricks GTBlocks.CASING_STAINLESS_CLEAN / gtceu:block/casings/solid/machine_casing_clean_stainless_steel GTBlocks.CASING_ALUMINIUM_FROSTPROOF / gtceu:block/casings/solid/machine_casing_frost_proof GTBlocks.CASING_INVAR_HEATPROOF / gtceu:block/casings/solid/machine_casing_heatproof GTBlocks.CASING_PTFE_INERT / gtceu:block/casings/solid/machine_casing_inert_ptfe GTBlocks.CASING_PALLADIUM_SUBSTATION / gtceu:block/casings/solid/machine_casing_palladium_substation GTBlocks.CASING_TUNGSTENSTEEL_ROBUST / gtceu:block/casings/solid/machine_casing_robust_tungstensteel GTBlocks.CASING_STEEL_SOLID / gtceu:block/casings/solid/machine_casing_solid_steel GTBlocks.CASING_TITANIUM_STABLE / gtceu:block/casings/solid/machine_casing_stable_titanium GTBlocks.CASING_HSSE_STURDY / gtceu:block/casings/solid/machine_casing_sturdy_hsse / GCyMBlocks.CASING_ATOMIC gtceu:block/casings/gcym/atomic_casing / GCyMBlocks.CASING_CORROSION_PROOF gtceu:block/casings/gcym/corrosion_proof_casing / GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING gtceu:block/casings/gcym/high_temperature_smelting_casing / GCyMBlocks.CASING_INDUSTRIAL_STEAM gtceu:block/casings/gcym/industrial_steam_casing / GCyMBlocks.CASING_LARGE_SCALE_ASSEMBLING gtceu:block/casings/gcym/large_scale_assembling_casing / GCyMBlocks.CASING_LASER_SAFE_ENGRAVING gtceu:block/casings/gcym/laser_safe_engraving_casing / GCyMBlocks.CASING_NONCONDUCTING gtceu:block/casings/gcym/nonconducting_casing / GCyMBlocks.CASING_REACTION_SAFE gtceu:block/casings/gcym/reaction_safe_mixing_casing / GCyMBlocks.CASING_SECURE_MACERATION gtceu:block/casings/gcym/secure_maceration_casing / GCyMBlocks.CASING_SHOCK_PROOF gtceu:block/casings/gcym/shock_proof_cutting_casing / GCyMBlocks.CASING_STRESS_PROOF gtceu:block/casings/gcym/stress_proof_casing / GCyMBlocks.CASING_VIBRATION_SAFE gtceu:block/casings/gcym/vibration_safe_casing / GCyMBlocks.CASING_WATERTIGHT gtceu:block/casings/gcym/watertight_casing workableCasingRenderer控制器正面材质 图片 workableCasingRenderer gtceu:block/multiblock/coke_oven gtceu:block/multiblock/data_bank gtceu:block/multiblock/electric_blast_furnace gtceu:block/multiblock/primitive_blast_furnace gtceu:block/multiblock/steam_grinder gtceu:block/multiblock/steam_oven gtceu:block/multiblock/implosion_compressor 看上哪个直接复制就好 recipes 方法 内容 .circuit(number) 编程电路（0-32） .itemInputs(inputs) 多物品输入 .inputFluids(inputs) 多流体输入 .itemOutputs(outputs) 多物品输出 .outputFluids(outputs) 多流体输出 .chancedOutput(stack,chance,tierchanceboost) 物品概率输出(输出的物品，概率，升压提高的概率) .chancedFluidOutput(stack,chance,tierchanceboost) 流体概率输出(输出流体，概率，升压提高的概率) .cleanroom(CleanroomType) 纯净车间(CLEANROOM纯净车间,STERILE_CLEANROOM无菌纯净车间) .duration(number) 持续时间 .EUt(number) 电压(正电压耗电，负电压产电) .dimension(dimension) 维度 .biome(biome) 群系 GTSoundEntries 名字 音效 GTSoundEntries CHEMICAL 化学 GTSoundEntries.CHEMICAL FIRE 火焰 GTSoundEntries.FIRE REPLICATOR 复制 GTSoundEntries.REPLICATOR MOTOR 马达 GTSoundEntries.MOTOR TURBINE 涡轮 GTSoundEntries.TURBINE CUT 切割 GTSoundEntries.CUT MINER 矿机 GTSoundEntries.MINER BOILER 锅炉 GTSoundEntries.BOILER ASSEMBLER 组装 GTSoundEntries.ASSEMBLER FURNACE 火炉 GTSoundEntries.FURNACE COOLING 冷却 GTSoundEntries.COOLING BATH 浸洗 GTSoundEntries.BATH COMBUSTION 燃烧 GTSoundEntries.COMBUSTION MACERATOR 研磨 GTSoundEntries.MACERATOR COMPRESSOR 压缩 GTSoundEntries.COMPRESSOR CENTRIFUGE 离心 GTSoundEntries.CENTRIFUGE MIXER 混合 GTSoundEntries.MIXER ELECTROLYZER 电解 GTSoundEntries.ELECTROLYZER ARC 电弧 GTSoundEntries.ARC 示例（应力物品发电机 energyoutput_recipe_type.js GTCEuStartupEvents.registry('gtceu:recipe_type', event => { event.create('energyoutput') .category('energyoutput') .setEUIO('out') .setMaxIOSize(1, 0, 0, 0) .setProgressBar(GuiTextures.PROGRESS_BAR_HAMMER, FillDirection.UP_TO_DOWN) .setSound(GTSoundEntries.ARC) .setMaxTooltips(6) }) energyoutput_multiblock.js GTCEuStartupEvents.registry('gtceu:machine', event => { event.create('energyoutput', 'multiblock') .rotationState(RotationState.NON_Y_AXIS) .recipeType('energyoutput') .appearanceBlock(GTBlocks.CASING_STEEL_SOLID) .pattern(definition => FactoryBlockPattern.start() .aisle('CCC', 'CGC', 'CCI') .aisle('CCC', 'GSG', 'COC') .aisle('CKC', 'CGC', 'CNC') .where('K', Predicates.controller(Predicates.blocks(definition.get()))) .where('G', Predicates.blocks('ae2:quartz_glass')) .where('S', Predicates.blocks('immersiveengineering:generator')) .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()) .or(Predicates.autoAbilities(definition.getRecipeTypes())) ) .where('I',Predicates.abilities(PartAbility.INPUT_KINETIC) .setExactLimit(1)) .where('O', Predicates.abilities(PartAbility.MUFFLER) .setExactLimit(1) ) .where('N', Predicates.abilities(PartAbility.MAINTENANCE)) .build() ) .workableCasingRenderer('gtceu:block/casings/solid/machine_casing_solid_steel' ,'gtceu:block/multiblock/implosion_compressor' , false) }) en_us.json { \"block.gtceu.energyoutput\": \"EnergyOutput\", \"gtceu.energyoutput\": \"EnergyOutput\" } energyoutput_recipes.js event.recipes.gtceu.energyoutput('energy') .inputStress(256) .rpm(32) .itemInputs('minecraft:coal_block') .EUt(-HV) .duration(18000) powered by Gitbook文章修改时间： 2024-03-05 22:27:12 "}}